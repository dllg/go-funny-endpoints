package router

import (
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/go-chi/chi"
	_ "github.com/swaggo/http-swagger/example/go-chi/docs" // docs is generated by Swag CLI, you have to import it.
	httpSwagger "github.com/swaggo/http-swagger/v2"

	"github.com/dllg/go-funny-endpoints/funny"
	"github.com/dllg/go-funny-endpoints/httpclient"
)

type msgfunc func(httpclient.HTTPClient) string

func messageHandler(f msgfunc) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		msg := f(&hc)
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusOK)
		json.NewEncoder(w).Encode(map[string]string{"message": msg})
	}
}

var (
	hc httpclient.Impl
)

// Setup creates the HTTP handler with documented routes.
// @title        Funny Endpoints API
// @version      1.0
// @description  A collection of funny joke/advice endpoints.
// @host         localhost:18080
// @BasePath     /v1
// @schemes      http
func Setup(url string) http.Handler {
	r := chi.NewRouter()

	// serve /docs/swagger.json
	r.Handle("/docs/*", http.StripPrefix("/docs", http.FileServer(http.Dir("./docs"))))

	// swagger UI
	r.Get("/swagger/*", httpSwagger.Handler(
		httpSwagger.URL(fmt.Sprintf("%s/docs/swagger.json", url)),
	))

	// v1 endpoints
	r.Route("/v1", func(r chi.Router) {

		// @description    Returns a random piece of advice from the Advice Slip API.
		// @id             getAdvice
		// @tags           advice
		// @summary        Get a piece of advice
		// @accept         json
		// @produce        json
		// @success        200
		// @failure        500
		// @router         /v1/advice [get]
		r.Get("/advice", messageHandler(funny.GetAdviceFromAPI))

		// @description    Returns a random Chuck Norris joke.
		// @id             getChuckNorris
		// @tags           chucknorris
		// @summary        Get a Chuck Norris joke
		// @accept         json
		// @produce        json
		// @success        200
		// @failure        500
		// @router         /v1/chucknorris [get]
		r.Get("/chucknorris", messageHandler(funny.GetChuckNorrisJokeFromAPI))

		// @description    Returns a random dad joke.
		// @id             getDadJoke
		// @tags           dadjoke
		// @summary        Get a Dad joke
		// @accept         json
		// @produce        json
		// @success        200
		// @failure        500
		// @router         /v1/dadjoke [get]
		r.Get("/dadjoke", messageHandler(funny.GetDadJokeFromAPI))

		// @description    Returns a random message (advice, Chuck Norris or dad joke).
		// @id             getRandomMessage
		// @tags           random
		// @summary        Get a random message
		// @accept         json
		// @produce        json
		// @success        200
		// @failure        500
		// @router         /v1/random [get]
		r.Get("/random", messageHandler(funny.GetRandomMessage))
	})

	return r
}
